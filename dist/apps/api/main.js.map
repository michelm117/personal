{"version":3,"file":"main.js","mappings":"gPAAA,kCACA,kCAEA,0CACA,sCACA,kCAGA,IAAaA,cAAb,MAAaA,cACXC,YAAoBC,YAAoCC,eAApC,KAAAD,YAAAA,YAAoC,KAAAC,cAAAA,aAA+B,CAIjFC,UAAkBC,WAAkCC,I,+DAClDC,KAAKL,YAAYM,SAAS,CAC9BC,GAAI,iBACJC,KAAMH,KAAKJ,cAAcQ,IAAI,aAC7BC,QAAS,sBACTC,KAAM,GAAGR,WAAWO,cAAcP,WAAWS,cAAcT,WAAWU,UAAUV,WAAWW,WAAWV,MAE1G,G,GAPA,qBAFC,WAAAW,UAAS,MACT,WAAAC,MAAK,aACW,8BAAAC,SAAgC,sCAAAC,W,mFAAH,mB,QAAA,IAAV,cAAAC,YAAA,cAAAA,YAAU,mB,2FALnCrB,cAAa,qBADzB,WAAAsB,c,wCAE+C,mB,QAAA,IAAb,SAAAC,eAAA,SAAAA,eAAa,UAAsC,mBAAtC,QAAsC,IAAb,SAAAC,eAAA,SAAAA,eAAa,aADzExB,eAAA,QAAAA,cAAAA,a,qLCRb,kCAEA,0CACA,kCACA,6BACA,kCACA,wCACA,+BAmCA,IAAayB,UAAb,MAAaA,YAAAA,UAAS,qBAjCrB,WAAAC,QAAO,CACNC,QAAS,CACP,eAAAC,kBAAkBC,QAAQ,CACxBC,UAAU,SAAAC,MAAKC,UAAW,KAAM,UAChCC,QAAS,CAAC,WAEZ,SAAAC,aAAaL,QAAQ,CACnBM,UAAU,EACVC,iBAAkBC,IAAIC,OAAO,CAC3BC,UAAWF,IAAIG,SAASC,WACxBC,UAAWL,IAAIG,SAASC,WACxBE,cAAeN,IAAIG,SAASC,WAC5BG,UAAWP,IAAIG,SAASC,WACxBI,KAAMR,IAAIS,aAGd,SAAAC,aAAaC,aAAa,CACxBC,WAAmBC,QAA0B,QAAD,4CAAC,OAC3CC,UAAW,CACTC,KAAMF,OAAOvC,IAAI,aACjB0C,QAAQ,EACRC,KAAM,CACJC,KAAML,OAAOvC,IAAI,aACjB6C,KAAMN,OAAOvC,IAAI,mB,IAIvB8C,OAAQ,CAAC,SAAAjC,kBAGbkC,YAAa,CAAC,iBAAA1D,eACd2D,UAAW,MAEAlC,WAAA,QAAAA,UAAAA,S,0HC1Cb,yBAAaJ,Y,eCAbuC,OAAOC,QAAUC,QAAQ,Y,eCAzBF,OAAOC,QAAUC,QAAQ,yB,eCAzBF,OAAOC,QAAUC,QAAQ,iB,eCAzBF,OAAOC,QAAUC,QAAQ,iB,eCAzBF,OAAOC,QAAUC,QAAQ,e,eCAzBF,OAAOC,QAAUC,QAAQ,uB,eCAzBF,OAAOC,QAAUC,QAAQ,iB,eCAzBF,OAAOC,QAAUC,QAAQ,Q,cCAzBF,OAAOC,QAAUC,QAAQ,O,GCCrBC,yBAA2B,CAAC,EAGhC,SAASC,oBAAoBC,UAE5B,IAAIC,aAAeH,yBAAyBE,UAC5C,QAAqBE,IAAjBD,aACH,OAAOA,aAAaL,QAGrB,IAAID,OAASG,yBAAyBE,UAAY,CAGjDJ,QAAS,CAAC,GAOX,OAHAO,oBAAoBH,UAAUL,OAAQA,OAAOC,QAASG,qBAG/CJ,OAAOC,OACf,C,+JCjBA,kCACA,gCAEA,uCAEA,W,kDACE,MAAMQ,UAAY,OAAAC,YAAYC,OAAO,aAAA9C,WAErC4C,IAAIG,gBADiB,OAErB,MAAMC,KAAOC,QAAQC,IAAI9B,MAAQ,WAC3BwB,IAAIO,OAAOH,MACjB,SAAAI,OAAOC,IACL,kDAAkDL,WAEtD,G,CAEAM,E","sources":["webpack://personal/./apps/api/src/app/app.controller.ts","webpack://personal/./apps/api/src/app/app.module.ts","webpack://personal/./apps/api/src/app/dto/message.dto.ts","webpack://personal/external commonjs \"@hapi/joi\"","webpack://personal/external commonjs \"@nestjs-modules/mailer\"","webpack://personal/external commonjs \"@nestjs/common\"","webpack://personal/external commonjs \"@nestjs/config\"","webpack://personal/external commonjs \"@nestjs/core\"","webpack://personal/external commonjs \"@nestjs/serve-static\"","webpack://personal/external commonjs \"nestjs-real-ip\"","webpack://personal/external commonjs \"tslib\"","webpack://personal/external node-commonjs \"path\"","webpack://personal/webpack/bootstrap","webpack://personal/./apps/api/src/main.ts"],"sourcesContent":["import { MailerService } from '@nestjs-modules/mailer';\nimport { Body, Controller, HttpCode, Post } from '@nestjs/common';\n\nimport { RealIP } from 'nestjs-real-ip';\nimport { MessageDto } from './dto/message.dto';\nimport { ConfigService } from '@nestjs/config';\n\n@Controller()\nexport class AppController {\n  constructor(private mailService: MailerService, private configService: ConfigService) {}\n\n  @HttpCode(200)\n  @Post('sendEmail')\n  async sendEmail(@Body() messageDto: MessageDto, @RealIP() ip: string) {\n    await this.mailService.sendMail({\n      to: 'marc@michel.lu',\n      from: this.configService.get('MAIL_FROM'),\n      subject: 'Contact - Portfolio',\n      text: `${messageDto.subject}\\n\\n${messageDto.message}\\n\\n${messageDto.name} - ${messageDto.email} - ${ip}`,\n    });\n  }\n}\n","import { Module } from '@nestjs/common';\n\nimport { AppController } from './app.controller';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport * as Joi from '@hapi/joi';\nimport { MailerModule } from '@nestjs-modules/mailer';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { join } from 'path';\n\n@Module({\n  imports: [\n    ServeStaticModule.forRoot({\n      rootPath: join(__dirname, '..', 'nx-app'),\n      exclude: ['/api*'],\n    }),\n    ConfigModule.forRoot({\n      isGlobal: true,\n      validationSchema: Joi.object({\n        MAIL_HOST: Joi.string().required(),\n        MAIL_USER: Joi.string().required(),\n        MAIL_PASSWORD: Joi.string().required(),\n        MAIL_FROM: Joi.string().required(),\n        PORT: Joi.number(),\n      }),\n    }),\n    MailerModule.forRootAsync({\n      useFactory: async (config: ConfigService) => ({\n        transport: {\n          host: config.get('MAIL_HOST'),\n          secure: false,\n          auth: {\n            user: config.get('MAIL_USER'),\n            pass: config.get('MAIL_PASSWORD'),\n          },\n        },\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n  controllers: [AppController],\n  providers: [],\n})\nexport class AppModule {}\n","export class MessageDto {\n  public name: string;\n\n  public email: string;\n\n  public subject: string;\n\n  public message: string;\n}\n","module.exports = require(\"@hapi/joi\");","module.exports = require(\"@nestjs-modules/mailer\");","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/config\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/serve-static\");","module.exports = require(\"nestjs-real-ip\");","module.exports = require(\"tslib\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * This is not a production server yet!\n * This is only a minimal backend to get started.\n */\n\nimport { Logger } from '@nestjs/common';\nimport { NestFactory } from '@nestjs/core';\n\nimport { AppModule } from './app/app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  const globalPrefix = 'api';\n  app.setGlobalPrefix(globalPrefix);\n  const port = process.env.PORT || 3333;\n  await app.listen(port);\n  Logger.log(\n    `ðŸš€ Application is running on: http://localhost:${port}/${globalPrefix}`\n  );\n}\n\nbootstrap();\n"],"names":["AppController","constructor","mailService","configService","sendEmail","messageDto","ip","this","sendMail","to","from","get","subject","text","message","name","email","HttpCode","Post","Body","RealIP","MessageDto","Controller","MailerService","ConfigService","AppModule","Module","imports","ServeStaticModule","forRoot","rootPath","join","__dirname","exclude","ConfigModule","isGlobal","validationSchema","Joi","object","MAIL_HOST","string","required","MAIL_USER","MAIL_PASSWORD","MAIL_FROM","PORT","number","MailerModule","forRootAsync","useFactory","config","transport","host","secure","auth","user","pass","inject","controllers","providers","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","app","NestFactory","create","setGlobalPrefix","port","process","env","listen","Logger","log","bootstrap"],"sourceRoot":""}